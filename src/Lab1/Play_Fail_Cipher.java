/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Lab1;

import com.sun.beans.finder.FieldFinder;
import static java.time.Clock.system;

/**
 *
 * @author ntluo
 */
public class Play_Fail_Cipher extends javax.swing.JFrame {

    /**
     * Creates new form Play_Fail_Cipher
     */
    public Play_Fail_Cipher() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtVanBan = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMaHoa = new javax.swing.JTextArea();
        btnMaHoa = new javax.swing.JButton();
        btnGiaiMa = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Thuật Toán Mã Hóa Play Fail Cipher");

        jLabel2.setText("Plaintext:");

        txtVanBan.setColumns(20);
        txtVanBan.setRows(5);
        jScrollPane1.setViewportView(txtVanBan);

        jLabel3.setText("Ciphertext:");

        txtMaHoa.setColumns(20);
        txtMaHoa.setRows(5);
        jScrollPane2.setViewportView(txtMaHoa);

        btnMaHoa.setText("v Encypt v");
        btnMaHoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMaHoaActionPerformed(evt);
            }
        });

        btnGiaiMa.setText("^ Dencypt ^");
        btnGiaiMa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGiaiMaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(btnMaHoa)
                .addGap(33, 33, 33)
                .addComponent(btnGiaiMa)
                .addContainerGap(66, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMaHoa)
                    .addComponent(btnGiaiMa))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static String findIndex(String[][] arr, String test)
	{
		String index = "";
		for(int i=0; i<arr.length; i++)
		{
			for(int j=0; j<arr[i].length; j++)
			{
				if(test.equalsIgnoreCase(arr[i][j]))
				{
					index = String.valueOf(i) + String.valueOf(j);
					return index;
					}
				}
			}
		return null;
		}
    
    
    private void btnMaHoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMaHoaActionPerformed
        // TODO add your handling code here:
        String plainText = "",plainTxt, cipherText="";
        String playFairMatrix[][]= {
                {"M","0","N","A","R"},
                {"C","H","Y","B","D"},
                {"E","F","G","I","K"},
                {"L","P","Q","S","T"},
                {"U","V","W","X","Z"},
        };
        System.out.println("Enter a plaintext:");
        plainTxt = txtVanBan.getText();
        String temp="";
        String arr[]=plainTxt.split(" ");
        for(int j=0; j<arr.length;j++)
        {
            temp = arr[j];
            if(temp.length() %2 != 0)
            {
                temp = temp+"x";
            }
            plainText = plainText + temp +" ";
        }
        for(int i = 0; i<plainText.length(); i+=2)
        {
            char c = plainText.charAt(i);
                char d = plainText.charAt(i);
                if(i+1<plainText.length())
                {
                    d = plainText.charAt(i+1);
                }
                String val = String.valueOf(c);
                String vald = String.valueOf(d);
                String index1, index2;
                if(val.equals(" "))
                {
                    cipherText = cipherText+" ";
                    i--;
                    continue;
                }
            else
            {
                    if(val.equalsIgnoreCase("J"))
                    {
                    index1 = findIndex(playFairMatrix, String.valueOf("I"));
                    }
            else
            {
                    index1 = findIndex(playFairMatrix, String.valueOf(plainText.charAt(i)));
            }
            if(vald.equalsIgnoreCase("J"))
                    {
                    index2 = findIndex(playFairMatrix, String.valueOf("I"));
                    }
            else
            {
                    index2 = findIndex(playFairMatrix, String.valueOf(plainText.charAt(i+1)));		
            }
            if(index1.charAt(0) == index2.charAt(0))
                {
                int m = Integer.parseInt(String.valueOf(index1.charAt(1)));
                int n = Integer.parseInt(String.valueOf(index2.charAt(1)));
                int o = Integer.parseInt(String.valueOf(index1.charAt(0)));
                int p = Integer.parseInt(String.valueOf(index2.charAt(0)));
                if(m==4)
                {
                        m=-1;
                }
                        if(n==4)
                        {
                                n=-1;
                        }
                                cipherText=cipherText+playFairMatrix[o][m+1];
                                cipherText=cipherText+playFairMatrix[p][n+1];
                }
                else if(index1.charAt(1) == index2.charAt(1))
                {
                        int o = Integer.parseInt(String.valueOf(index1.charAt(0)));
                        int m = Integer.parseInt(String.valueOf(index1.charAt(1)));
                        int p = Integer.parseInt(String.valueOf(index2.charAt(0)));
                        int n = Integer.parseInt(String.valueOf(index2.charAt(1)));
                        if(p>3)
                                {
                                        p=-1;
                                }
                        if(o>3)
                                {
                                        o=-1;
                                }
                                        cipherText=cipherText+playFairMatrix[o+1][m];
                                        cipherText=cipherText+playFairMatrix[p+1][n];
                        }
                        else
                        {
                            int o = Integer.parseInt(String.valueOf(index1.charAt(0)));
                            int m = Integer.parseInt(String.valueOf(index1.charAt(1)));
                            int p = Integer.parseInt(String.valueOf(index2.charAt(0)));
                            int n = Integer.parseInt(String.valueOf(index2.charAt(1)));
                            cipherText=cipherText+playFairMatrix[o][n];
                            cipherText=cipherText+playFairMatrix[p][m];
            
                            }
                            }
                        
                
                System.out.println("The cipher text of the above plain text is:");
                System.out.println(cipherText);
                txtMaHoa.setText(cipherText.toString().toUpperCase());                                        
        }
                       
    }//GEN-LAST:event_btnMaHoaActionPerformed

    private void btnGiaiMaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGiaiMaActionPerformed
        // TODO add your handling code here:
                String plainText = "",cipherText="";
        String playFairMatrix[][]= {
                {"M","0","N","A","R"},
                {"C","H","Y","B","D"},
                {"E","F","G","I","K"},
                {"L","P","Q","S","T"},
                {"U","V","W","X","Z"},
        };
        System.out.println("Enter a plaintext:");
        cipherText = txtMaHoa.getText();
        txtMaHoa.setText(cipherText.toString().toUpperCase());        
        for(int i = 0; i<cipherText.length(); i+=2)
        {
            char c = cipherText.charAt(i);
                char d = cipherText.charAt(i);
                if(i+1<cipherText.length())
                {
                    d = cipherText.charAt(i+1);
                }
                String val = String.valueOf(c);
                String vald = String.valueOf(d);
                String index1, index2;
                if(val.equals(" "))
                {
                    plainText = plainText+" ";
                    i--;
                    continue;
                }
            else
            {
                    if(val.equalsIgnoreCase("J"))
                    {
                    index1 = findIndex(playFairMatrix, String.valueOf("I"));
                    }
            else
            {
                    index1 = findIndex(playFairMatrix, String.valueOf(cipherText.charAt(i)));
            }
            if(vald.equalsIgnoreCase("J"))
                    {
                    index2 = findIndex(playFairMatrix, String.valueOf("I"));
                    }
            else
            {
                    index2 = findIndex(playFairMatrix, String.valueOf(cipherText.charAt(i+1)));		
            }
            if(index1.charAt(0) == index2.charAt(0))
                {
                int m = Integer.parseInt(String.valueOf(index1.charAt(1)));
                int n = Integer.parseInt(String.valueOf(index2.charAt(1)));
                int o = Integer.parseInt(String.valueOf(index1.charAt(0)));
                int p = Integer.parseInt(String.valueOf(index2.charAt(0)));
                if(m==0)
                {
                        m=5;
                }
                        if(n==0)
                        {
                                n=5;
                        }
                                plainText=plainText+playFairMatrix[o][m-1];
                                plainText=plainText+playFairMatrix[p][n-1];
                }
                else if(index1.charAt(1) == index2.charAt(1))
                {
                        int o = Integer.parseInt(String.valueOf(index1.charAt(0)));
                        int m = Integer.parseInt(String.valueOf(index1.charAt(1)));
                        int p = Integer.parseInt(String.valueOf(index2.charAt(0)));
                        int n = Integer.parseInt(String.valueOf(index2.charAt(1)));
                        if(p==0)
                                {
                                        p=5;
                                }
                        if(o==0)
                                {
                                        o=5;
                                }
                                        cipherText=cipherText+playFairMatrix[o-1][m];
                                        cipherText=cipherText+playFairMatrix[p-1][n];
                        }
                        else
                        {
                            int o = Integer.parseInt(String.valueOf(index1.charAt(0)));
                            int m = Integer.parseInt(String.valueOf(index1.charAt(1)));
                            int p = Integer.parseInt(String.valueOf(index2.charAt(0)));
                            int n = Integer.parseInt(String.valueOf(index2.charAt(1)));
                            plainText=plainText+playFairMatrix[o][n];
                            plainText=plainText+playFairMatrix[p][m];
            
                            }
                            }
                        
                
                System.out.println("The cipher text of the above plain text is:");
                System.out.println(plainText);
                txtMaHoa.setText(plainText.toString().toUpperCase());  
        }
    }//GEN-LAST:event_btnGiaiMaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Play_Fail_Cipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Play_Fail_Cipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Play_Fail_Cipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Play_Fail_Cipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Play_Fail_Cipher().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGiaiMa;
    private javax.swing.JButton btnMaHoa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtMaHoa;
    private javax.swing.JTextArea txtVanBan;
    // End of variables declaration//GEN-END:variables
}
// là lập ma trận 5x5 dựa trên từ khóa cho trước và tăng đơn vị các ký tự trên bảng chữ cái;